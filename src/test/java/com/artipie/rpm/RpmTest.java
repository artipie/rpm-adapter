/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Yegor Bugayenko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.artipie.rpm;

import com.artipie.asto.Key;
import com.artipie.asto.Storage;
import com.artipie.asto.fs.FileStorage;
import com.artipie.asto.fs.RxFile;
import com.artipie.asto.rx.RxStorageWrapper;
import com.jcabi.matchers.XhtmlMatchers;
import com.jcabi.xml.XMLDocument;
import io.vertx.reactivex.core.Vertx;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Collectors;
import java.util.zip.GZIPInputStream;
import org.apache.commons.io.IOUtils;
import org.cactoos.io.BytesOf;
import org.cactoos.text.HexOf;
import org.hamcrest.MatcherAssert;
import org.hamcrest.Matchers;
import org.hamcrest.core.IsEqual;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.DisabledOnOs;
import org.junit.jupiter.api.condition.OS;
import org.junit.jupiter.api.io.TempDir;

/**
 * Test case for {@link RpmAbstraction}.
 *
 * @since 0.0.3
 * @todo #32:30min This test class needs refactoring. What is still need to be done
 *  is to get rid of multi-threading in matcher, to simplify the test,
 *  and to test only one thing in each unit test (split test to multiple if needed).
 * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public final class RpmTest {

    /**
     * Storage key for gzipped primary xml.
     */
    private static final String PRIMARY_GZ_KEY = "repodata/primary.xml.gz";

    /**
     * The Vertx instance.
     */
    private final Vertx vertx = Vertx.vertx();

    /**
     * Rpm storage works, in many threads.
     *
     * If you want to see the files generated by Rpm, just run this
     * unit test (either from command line or via your IDE) and check
     * the content of the "target/tests" directory. It must contain
     * the files generated.
     *
     * @param folder Temporary source folder
     * @param store Temporary storage folder
     * @throws Exception If some problem inside
     */
    @Test
    @DisabledOnOs(OS.WINDOWS)
    public void addsSingleRpm(@TempDir final Path folder, @TempDir final Path store)
        throws Exception {
        final String key = "nginx-1.16.1-1.el8.ngx.x86_64.rpm";
        final Storage storage = new FileStorage(store, this.vertx.fileSystem());
        FileStorageLoader.uploadResource(storage, key);
        final RpmAbstraction rpm = new RpmAbstraction.Base(storage, this.vertx);
        rpm.update(new Key.From(key)).blockingAwait();
        final Path primary = folder.resolve("primary.xml.gz");
        new RxFile(primary, this.vertx.fileSystem()).save(
            new RxStorageWrapper(storage)
                .value(new Key.From(RpmTest.PRIMARY_GZ_KEY))
                .flatMapPublisher(pub -> pub)
        ).blockingAwait();
        MatcherAssert.assertThat(
            new XMLDocument(
                new String(
                    IOUtils.toByteArray(
                        new GZIPInputStream(
                            Files.newInputStream(primary)
                        )
                    )
                )
            ),
            XhtmlMatchers.hasXPath(
                "/ns1:metadata/ns1:package[ns1:name='nginx']",
                "http://linux.duke.edu/metadata/common"
            )
        );
        final String[] files = {
            "repomd.xml",
            "filelists.xml.gz",
            "other.xml.gz",
            "primary.xml.gz",
        };
        for (final String file : files) {
            MatcherAssert.assertThat(
                Paths.get(
                    store.toString(),
                    String.format("repodata/%s", file)
                ).toFile().exists(),
                Matchers.equalTo(true)
            );
        }
    }

    /**
     * Netsted JUnit test to validate naming policy.
     * @since 0.3.3
     */
    @Nested
    class NamingPolicyAware {
        /**
         * Key to store binary RPM in the storage.
         */
        private static final String KEY = "aom-1.0.0-8.20190810git9666276.el8.aarch64.rpm";

        // @checkstyle VisibilityModifierCheck (4 lines)
        /**
         * Temporary dir for upload RPM into the storage.
         */
        @TempDir Path folder;

        // @checkstyle VisibilityModifierCheck (4 lines)
        /**
         * Temporary dir for the storage.
         */
        @TempDir Path store;

        /**
         * The storage.
         */
        private Storage storage;

        @Test
        public void defaultPolicy() throws Exception {
            new RpmAbstraction.Base(this.storage, RpmTest.this.vertx)
                .update(
                    new Key.From(NamingPolicyAware.KEY)
                ).blockingAwait();
            MatcherAssert.assertThat(
                this.storage.list(new Key.From("repodata"))
                    .get().stream().map(Key::string).collect(Collectors.toList()),
                Matchers.containsInAnyOrder(
                    "repodata/repomd.xml",
                    "repodata/filelists.xml.gz",
                    "repodata/other.xml.gz",
                    RpmTest.PRIMARY_GZ_KEY
                )
            );
        }

        @Test
        // @checkstyle MethodNameCheck (1 line)
        public void sha1PrefixesPolicy() throws Exception {
            this.updateAarchRpmWithPrefixes(Digest.SHA1);
        }

        @Test
        // @checkstyle MethodNameCheck (1 line)
        public void sha256PrefixesPolicy() throws Exception {
            this.updateAarchRpmWithPrefixes(Digest.SHA256);
        }

        @BeforeEach
        void setUp() throws Exception {
            this.storage = new FileStorage(this.store, RpmTest.this.vertx.fileSystem());
            FileStorageLoader.uploadResource(this.storage, NamingPolicyAware.KEY);
        }

        @SuppressWarnings("PMD.AvoidCatchingGenericException")
        private void updateAarchRpmWithPrefixes(final Digest digest) throws Exception {
            new RpmAbstraction.Base(
                this.storage,
                RpmTest.this.vertx,
                new NamingPolicy.HashPrefixed(digest),
                digest
            ).update(new Key.From(NamingPolicyAware.KEY)).blockingAwait();
            final List<String> keys = this.storage.list(
                new Key.From("repodata")
            ).get().stream().map(Key::string).collect(Collectors.toList());
            MatcherAssert.assertThat(
                "Could not find repomd.xml",
                keys.remove("repodata/repomd.xml")
            );
            keys.forEach(
                key -> {
                    try {
                        final String[] components = key.split("/");
                        final String prefix = components[components.length - 1].split("-")[0];
                        final String hash = new HexOf(
                            new BytesOf(
                                digest.messageDigest().digest(
                                    Files.readAllBytes(this.store.resolve(key))
                                )
                            )
                        ).asString();
                        MatcherAssert.assertThat(hash, new IsEqual<>(prefix));
                    // @checkstyle IllegalCatchCheck (1 line)
                    } catch (final Exception ex) {
                        MatcherAssert.assertThat(
                            String.format("Exception occurred: %s", ex.getMessage()),
                            false
                        );
                    }
                });
        }
    }
}
